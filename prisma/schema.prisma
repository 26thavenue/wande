// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_SUPABASE_URL")
}

model Product {
  id          String     @id @default(cuid()) 
  description String
  imageUrl    String
  name        String
  price       Int
  brand       String
  numberInStock Int      @default(1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItem   CartItem?
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Category{
  id          String     @id @default(cuid()) 
  name        String     @unique
  products    Product[]
  @@map("categories")

}

model CartItem{
  id        String     @id @default(cuid()) 
  product   Product    @relation(fields: [productId], references: [id])
  productId String     @unique
  userId    String 
  user      User  @relation(fields: [userId], references: [id]) 
  quantity  Int
  orderId   String? 
  order     Order? @relation(fields: [orderId], references: [id])
  createdAt DateTime   @default(now())

  @@map("cartItems")

}


// model Cart {
//   id        String     @id @default(cuid()) 
//   items     CartItem[]
//   userId    String    @unique  
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   totalPrice  Int

  
//   @@map("carts") 
// }

model Order{
  id          String @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      String @default("created")
  deliveryStatus String @default("PENDING")
  deliveryDate DateTime?
  createdAt   DateTime @default(now())
  items       CartItem[]
  address     String
  payment     Payment? 
  paymentId   String? @unique
  total       Int
  phoneNumber  Int

  
  @@map("orders")
}

model User {
  id            String    @id @default(cuid()) 
  externalId    String    @unique
  name          String
  email         String   @unique
  items         CartItem[]
  Order         Order[]

  role          Role @default(USER)
  address      String?
  @@map("users")
}

enum Role {
  USER
  ADMIN
}


model Payment{
  id        String @id @default(cuid())
  orderId   String @unique
  order     Order @relation(fields: [orderId], references: [id])
  amount    Float
  status    String @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("payments")

}

enum PaymentStatus{
  PENDING
  DELIVERED
  FAILED
  CANCELLED
  REFUNDED
  SUCCESS
  DECLINED
}
