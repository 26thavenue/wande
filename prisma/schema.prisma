// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_SUPABASE_URL")
}

model Product {
  id          String     @id @default(cuid()) 
  description String
  imageUrl    String
  name        String
  price       Int
  brand       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem[]

  @@map("products")
}

model Cart {
  id        String     @id @default(cuid()) 
  items     CartItem[]
  userId    String?   
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid()) 
  productId String  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  @@map("cartitems")
}

// model Account {
//   id                String  @id @default(cuid()) 
//   userId            String  
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? 
//   access_token      String? 
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? 
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           String   @id @default(cuid()) 
//   sessionToken String   @unique
//   userId       String   
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }
enum Role{
  USER
  ADMIN
}
model User {
  id            String    @id @default(cuid()) 
  name          String?
  email         String?   @unique
  Cart          Cart[]
  Order         Order[]
  role          Role
  @@map("users")
}

model Admin{
  id            String    @id @default(cuid()) 
  name          String?
  email         String? @unique
 
  @@map("admins")
}

model Order{
  id          String @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  status      String
  createdAt   DateTime @default(now())
  products    CartItem[]
  address     String?
}

enum Status{
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
  FAILED
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
 
}


model VerificationToken {
  id         String   @id @default(cuid()) 
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
