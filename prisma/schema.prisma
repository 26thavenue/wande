// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_SUPABASE_URL")
}

model Product {
  id          String     @id @default(cuid()) 
  description String
  imageUrl    String
  name        String
  price       Int
  brand       String
  numberInStock Int  @default(1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem?
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryName String?

  @@map("products")
}

model Category{
  id          String     @id @default(cuid()) 
  name        String     @unique
  products    Product[]
  imageUrl    String?
  @@map("categories")

}

model CartItem {
  id        String  @id @default(cuid()) 
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])
  productName String 
  quantity    Int
  cartId    String?  
  cart      Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  orderId   String?
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  price     Int
  imageUrl String
  @@map("cartitems")
}

model Cart {
  id        String     @id @default(cuid()) 
  items     CartItem[]
  userId    String?   
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  totalPrice  Int? 

  @@map("carts")
}



enum Role{
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid()) 
  name          String?
  email         String?   @unique
  Cart          Cart[]
  Order         Order[]
  role          Role
  address      String?
  @@map("users")
}

model Admin{
  id            String    @id @default(cuid()) 
  name          String?
  email         String? @unique
 
  @@map("admins")
}

model Order{
  id          String @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  status      String @default("PENDING")
  createdAt   DateTime @default(now())
  products    CartItem[]
  address     String?
  payment     Payment? 
  paymentId   String?

   @@map("orders")
}



model Payment{
  id        String @id @default(cuid())
  orderId   String @unique
  order     Order @relation(fields: [orderId], references: [id])
  amount    Float
  status    String
}

enum Status{
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
  FAILED
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
 
}


model VerificationToken {
  id         String   @id @default(cuid()) 
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
